name: Test Build Locally

on:
  workflow_dispatch:
  push:
    branches: [ test-* ]

jobs:
  test-build:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup user environment and install dependencies
        run: |
          # Create a normal user environment
          useradd -m -s /bin/bash builder
          
          # Install dependencies as root first
          # Install LLVM/Clang 20
          wget -qO- https://apt.llvm.org/llvm.sh | sudo bash -s -- 20
          
          # Install newer CMake from Kitware
          wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null
          echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ jammy main' | sudo tee /etc/apt/sources.list.d/kitware.list >/dev/null
          
          sudo apt-get update -q
          sudo apt-get install -y --no-install-recommends \
            cmake \
            ninja-build \
            make \
            python3-pip \
            clang-20 \
            libc++-20-dev \
            libc++abi-20-dev \
            libclang-rt-20-dev \
            tar \
            coreutils \
            sudo
          
          # Give builder user access to the project
          chown -R builder:builder /home/mj/workspace/hennypenny/tier1/tierkit-archive
      
      - name: Install Conan as builder user
        run: |
          sudo -u builder bash -c "
            cd /home/mj/workspace/hennypenny/tier1/tierkit-archive
            pip install --user 'conan>=2.0'
            ~/.local/bin/conan profile detect --force
          "
      
      - name: Configure Conan profile for Clang as builder user
        run: |
          sudo -u builder tee /home/builder/.conan2/profiles/default > /dev/null << 'EOF'
          [settings]
          os=Linux
          arch=x86_64
          compiler=clang
          compiler.version=20
          compiler.libcxx=libc++
          compiler.cppstd=23
          build_type=Debug
          
          [buildenv]
          CC=clang-20
          CXX=clang++-20
          EOF
      
      - name: Build and test as builder user
        run: |
          sudo -u builder bash -c '
            cd /home/mj/workspace/hennypenny/tier1/tierkit-archive
            export PATH=$HOME/.local/bin:$PATH
            
            echo "Verifying Clang installation..."
            clang++-20 --version
            
            echo "Testing C++23 features..."
            echo "#include <expected>" > /tmp/test_expected.cpp
            echo "int main() { std::expected<int, int> e{42}; return 0; }" >> /tmp/test_expected.cpp
            clang++-20 -stdlib=libc++ -std=c++23 /tmp/test_expected.cpp -o /tmp/test_expected
            echo "C++23 test passed!"
            
            echo "Checking Conan profile..."
            cat ~/.conan2/profiles/default
            
            mkdir -p build
            
            echo "Installing dependencies with Conan..."
            conan install . --output-folder=build --build=missing \
              -s build_type=Debug \
              -s compiler.cppstd=23 \
              -c tools.cmake.cmaketoolchain:generator="Ninja"
            
            # Find the toolchain file
            TOOLCHAIN_FILE=$(find build -name "conan_toolchain.cmake" | head -1)
            echo "Found toolchain at: $TOOLCHAIN_FILE"
            
            if [ -n "$TOOLCHAIN_FILE" ]; then
              TOOLCHAIN_ARG="-DCMAKE_TOOLCHAIN_FILE=$TOOLCHAIN_FILE"
            else
              echo "Warning: No toolchain file found, proceeding without Conan"
              TOOLCHAIN_ARG=""
            fi
            
            echo "Configuring with CMake..."
            cmake -B build -S . \
              -G Ninja \
              -DCMAKE_BUILD_TYPE=Debug \
              -DCMAKE_C_COMPILER=clang-20 \
              -DCMAKE_CXX_COMPILER=clang++-20 \
              -DCMAKE_CXX_STANDARD=23 \
              -DCMAKE_CXX_FLAGS="-stdlib=libc++" \
              $TOOLCHAIN_ARG
              
            echo "Building..."
            cmake --build build -j$(nproc)
            
            echo "Running tests..."
            cd build
            ctest --output-on-failure || echo "Some tests may have failed, but build was successful"
          '
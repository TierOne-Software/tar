name: Build tierone-tar

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        compiler:
          - { name: "clang-19", cc: "clang-19", cxx: "clang++-19", version: "19" }
          - { name: "clang-20", cc: "clang-20", cxx: "clang++-20", version: "20" }
        build_type: [Release, Debug]

    name: Build with ${{ matrix.compiler.name }} (${{ matrix.build_type }})

    steps:
      - uses: actions/checkout@v4

      - name: Setup user environment and install dependencies
        run: |
          # Create a normal user environment
          useradd -m -s /bin/bash builder
          
          # Setup CMake
          wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null
          echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ jammy main' | sudo tee /etc/apt/sources.list.d/kitware.list >/dev/null
          
          sudo apt-get update -q
          sudo apt-get install -y --no-install-recommends \
            cmake \
            ninja-build \
            git \
            wget \
            tar \
            coreutils \
            sudo

      - name: Install compiler toolchain
        run: |
          # Install LLVM/Clang
          wget -qO- https://apt.llvm.org/llvm.sh | sudo bash -s -- ${{ matrix.compiler.version }}
          sudo apt-get install -y --no-install-recommends \
            libc++-${{ matrix.compiler.version }}-dev \
            libc++abi-${{ matrix.compiler.version }}-dev
          
          # Give builder user access to the project
          sudo chown -R builder:builder ${{ github.workspace }}


      - name: Build and test as builder user
        run: |
          sudo -u builder bash -c '
            cd ${{ github.workspace }}
            
            echo "Building with ${{ matrix.compiler.name }} in ${{ matrix.build_type }} mode..."
            
            mkdir -p build
            
            echo "Configuring with CMake..."
            cmake -B build -S . \
              -G Ninja \
              -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
              -DCMAKE_TOOLCHAIN_FILE=toolchainfile-amd64-clang${{ matrix.compiler.version }}.cmake \
              -DCMAKE_C_COMPILER=${{ matrix.compiler.cc }} \
              -DCMAKE_CXX_COMPILER=${{ matrix.compiler.cxx }} \
              -DCMAKE_CXX_STANDARD=23
              
            echo "Building..."
            cmake --build build -j$(nproc)
            
            echo "Running tests..."
            cd build
            ctest --output-on-failure -C ${{ matrix.build_type }} --verbose
          '

      - name: Upload build artifacts on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.compiler.name }}-${{ matrix.build_type }}
          path: |
            build/Testing/Temporary/LastTest.log
            build/**/*.log

  release:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Create release package
        run: |
          mkdir -p release_package
          
          # Combine all compiler artifacts
          for compiler in clang-19 clang-20; do
            if [ -d "artifacts/library-${compiler}-Release" ]; then
              mkdir -p "release_package/${compiler}"
              cp -r "artifacts/library-${compiler}-Release"/* "release_package/${compiler}/"
            fi
          done
          
          # Create comprehensive release tarball
          tar -czf library-release-${{ github.ref_name }}.tar.gz release_package/
          
          # Create individual compiler packages
          cd artifacts
          for tarball in library-*-Release.tar.gz; do
            if [ -f "$tarball" ]; then
              cp "$tarball" ../
            fi
          done

      - name: Generate release notes
        run: |
          echo "# Release ${{ github.ref_name }}" > release_notes.md
          echo "" >> release_notes.md
          echo "## Supported Compilers" >> release_notes.md
          echo "- Clang 19, 20" >> release_notes.md
          echo "" >> release_notes.md
          echo "## C++ Standard" >> release_notes.md
          echo "- C++23" >> release_notes.md
          echo "" >> release_notes.md
          echo "## Artifacts" >> release_notes.md
          echo "- \`library-release-${{ github.ref_name }}.tar.gz\`: Complete library package with all compiler variants" >> release_notes.md
          echo "- Individual compiler packages available for specific compiler requirements" >> release_notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            library-release-${{ github.ref_name }}.tar.gz
            library-*-Release.tar.gz
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}